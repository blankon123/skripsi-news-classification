{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Skripri - Feed Parsing Engine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Proses Pertama, inisialisasi link\n",
    "Ceritanya list sudah ada di collection MongoLab, tetapi untuk testing digunakan inisiasi link manual"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import feedparser\n",
    "import sys\n",
    "import time\n",
    "from pymongo import MongoClient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "##Testing\n",
    "\n",
    "feeds = [['detik','http://detik.feedsportal.com/c/33613/f/656089/index.rss'],\n",
    "         ['viva','http://rss.viva.co.id/get/bisnis'],\n",
    "         ['merdeka','http://www.merdeka.com/feed/'],\n",
    "         ['liputan6','http://www.liputan6.com/feed/rss2'],\n",
    "         ['tribun','http://www.tribunnews.com/rss/bisnis'],\n",
    "         ['okezone','http://sindikasi.okezone.com/index.php/rss/11/RSS2.0'],\n",
    "         ['jpnn','http://www.jpnn.com/index.php?mib=rss&id=216'],\n",
    "         ['suara','http://www.suara.com/rss/bisnis'],\n",
    "         ['bisniscom','http://www.bisnis.com/rss/index?c=382']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# server = 'localhost'\n",
    "# port = 27017\n",
    "# db_name = 'thosangs-news'\n",
<<<<<<< HEAD
    "# username = 'userSkripsi'"
=======
    "# username = 'userSkripsi'\n",

>>>>>>> 04f94b411e5691e1a0472a2e83f9c9aba5dd794d
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python version 2.7.10 (default, Oct 14 2015, 16:09:02) \n",
      "[GCC 5.2.1 20151010]\n",
      "Pymongo version 3.1.1\n",
      "\n",
      "Connecting ...\n",
      "\n",
      "Getting database ...\n",
      "\n",
      "Authenticating ...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pymongo\n",
    "print 'Python version', sys.version\n",
    "print 'Pymongo version', pymongo.version\n",
    "\n",
    "# connect to server\n",
    "print '\\nConnecting ...'\n",
    "conn = MongoClient(server, port)\n",
    "\n",
    "# Get the database\n",
    "print '\\nGetting database ...'\n",
    "db = conn[db_name]\n",
    "\n",
    "# Have to authenticate to get access\n",
    "print '\\nAuthenticating ...'\n",
    "db.authenticate(username, password)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "for i in range(len(feeds)): print(feeds[i][1])\n",
    "\n",
    "pos = db.newsLink\n",
    "pos.insert_many([{ 'name' : feeds[i][0],'link' : feeds[i][1]} for i in range(len(feeds))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "link = db.newsLink.find()\n",
    "feeds = []\n",
    "for l in link:\n",
    "    dummy = {}\n",
    "    dummy['name'] = l['name']\n",
    "    dummy['link'] = l['link']\n",
    "    feeds.append(dummy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "detik 20-News 0.70645403862-Seconds\n",
      "viva 200-News 0.395403146744-Seconds\n",
      "merdeka 100-News 0.205430984497-Seconds\n",
      "liputan6 100-News 0.323644161224-Seconds\n",
      "tribun 20-News 0.140833854675-Seconds\n",
      "okezone 50-News 0.112392902374-Seconds\n",
      "jpnn 16-News 0.112134933472-Seconds\n",
      "suara 20-News 0.110912084579-Seconds\n",
      "bisniscom 20-News 0.132827043533-Seconds\n"
     ]
    }
   ],
   "source": [
    "doc = dict()\n",
    "for i in range(len(feeds)):\n",
    "    start_time = time.time()\n",
    "    doc[feeds[i]['name']] = feedparser.parse(feeds[i]['link'])['entries']\n",
    "    for j in range(len(doc[feeds[i]['name']])) : doc[feeds[i]['name']][j].pop('published_parsed') \n",
    "    print '{0} {1}-News {2}-Seconds'.format(feeds[i]['name'],len(doc[feeds[i]['name']]),(time.time()-start_time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pos = db.news\n",
    "for linkBerita in doc:\n",
    "    for berita in doc[linkBerita]:\n",
    "        if (pos.find({'link' : berita['link']})):\n",
    "            doc[linkBerita].remove(berita)\n",
    "        else:\n",
    "            print 'TIDAK '+berita['link']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://detik.feedsportal.com/c/33613/f/656089/s/4e8048a9/sc/3/l/0Lfinance0Bdetik0N0Cread0C20A160C0A30C250C1120A170C31730A410C40Cakhir0Emaret0Einka0Eekspor0E150Ekereta0Emade0Ein0Emadiun0Eke0Ebangladesh/story01.htm\n"
     ]
    }
   ],
   "source": [
    "dd = pos.find({'link' : doc['viva'][1]['link']})\n",
    "print doc['detik'][1]['link']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "documents must be a non-empty list",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-28-f351c3ec5120>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mpos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minsert_many\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mdoc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfeeds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'name'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfeeds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdoc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfeeds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'name'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m/home/blank/.local/lib/python2.7/site-packages/pymongo/collection.pyc\u001b[0m in \u001b[0;36minsert_many\u001b[1;34m(self, documents, ordered)\u001b[0m\n\u001b[0;32m    577\u001b[0m         \"\"\"\n\u001b[0;32m    578\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdocuments\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcollections\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mIterable\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mor\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mdocuments\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 579\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"documents must be a non-empty list\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    580\u001b[0m         \u001b[0minserted_ids\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    581\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mgen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: documents must be a non-empty list"
     ]
    }
   ],
   "source": [
    "pos.insert_many([doc[feeds[i]['name']][j] for i in range(len(feeds)) for j in range(len(doc[feeds[i]['name']]))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "d = pos.find"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ds' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-11-f528975bfb91>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mcek\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mawal\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0makhir\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m     \u001b[0mjudul\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m     \u001b[0mshortdesc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mFindShortDesc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'width=\"100\" />'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'<br c'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'ds' is not defined"
     ]
    }
   ],
   "source": [
    "#testing ekstrak deskripsi singkat detik.com\n",
    "def FindShortDesc(desc,cekawal,cekakhir):\n",
    "    cek = desc\n",
    "    awal  = cek.find(cekawal)+len(cekawal)\n",
    "    akhir = cek.find(cekakhir)\n",
    "    return cek[awal:akhir]\n",
    "\n",
    "for j in range(0,len(ds)):\n",
    "    judul = ds.title[j]\n",
    "    shortdesc = FindShortDesc(ds.summary[j],'width=\"100\" />','<br c')\n",
    "    img = FindShortDesc(ds.summary[j],'src=\"','\" width')\n",
    "    link = ds.id[j]\n",
    "    print judul\n",
    "    print shortdesc\n",
    "    print img\n",
    "    print link+'\\n'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://images.detik.com/content/2015/11/26/4/sawah.jpeg\n"
     ]
    }
   ],
   "source": [
    "print(FindShortDesc(ds.summary[0],'src=\"','\" width'))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
